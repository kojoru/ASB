// Signature file for parser generated by fsyacc
module BusParser
type token = 
  | EOF
  | WITH
  | DO
  | EVENT
  | COMMAND
  | TRANSFORM
  | RULE
  | CL
  | SC
  | FLOAT of (float)
  | INT of (int)
  | ID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_WITH
    | TOKEN_DO
    | TOKEN_EVENT
    | TOKEN_COMMAND
    | TOKEN_TRANSFORM
    | TOKEN_RULE
    | TOKEN_CL
    | TOKEN_SC
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (string) 
