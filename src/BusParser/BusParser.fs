// Implementation file for parser generated by fsyacc
module BusParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "C:\Users\Konstantin\Desktop\YaccSample\YaccSample\BusParser.fsp"
   
open Bus   

# 10 "C:\Users\Konstantin\Desktop\YaccSample\YaccSample\BusParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | WITH
  | DO
  | EVENT
  | COMMAND
  | TRANSFORM
  | RULE
  | CL
  | SC
  | FLOAT of (float)
  | INT of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_WITH
    | TOKEN_DO
    | TOKEN_EVENT
    | TOKEN_COMMAND
    | TOKEN_TRANSFORM
    | TOKEN_RULE
    | TOKEN_CL
    | TOKEN_SC
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | WITH  -> 1 
  | DO  -> 2 
  | EVENT  -> 3 
  | COMMAND  -> 4 
  | TRANSFORM  -> 5 
  | RULE  -> 6 
  | CL  -> 7 
  | SC  -> 8 
  | FLOAT _ -> 9 
  | INT _ -> 10 
  | ID _ -> 11 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_WITH 
  | 2 -> TOKEN_DO 
  | 3 -> TOKEN_EVENT 
  | 4 -> TOKEN_COMMAND 
  | 5 -> TOKEN_TRANSFORM 
  | 6 -> TOKEN_RULE 
  | 7 -> TOKEN_CL 
  | 8 -> TOKEN_SC 
  | 9 -> TOKEN_FLOAT 
  | 10 -> TOKEN_INT 
  | 11 -> TOKEN_ID 
  | 14 -> TOKEN_end_of_input
  | 12 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 14 
let _fsyacc_tagOfErrorTerminal = 12

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | WITH  -> "WITH" 
  | DO  -> "DO" 
  | EVENT  -> "EVENT" 
  | COMMAND  -> "COMMAND" 
  | TRANSFORM  -> "TRANSFORM" 
  | RULE  -> "RULE" 
  | CL  -> "CL" 
  | SC  -> "SC" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | EVENT  -> (null : System.Object) 
  | COMMAND  -> (null : System.Object) 
  | TRANSFORM  -> (null : System.Object) 
  | RULE  -> (null : System.Object) 
  | CL  -> (null : System.Object) 
  | SC  -> (null : System.Object) 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; |]
let _fsyacc_action_rows = 2
let _fsyacc_actionTableElements = [|0us; 16385us; 0us; 49152us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 1us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; |]
let _fsyacc_reductions ()  =    [| 
# 133 "C:\Users\Konstantin\Desktop\YaccSample\YaccSample\BusParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 142 "C:\Users\Konstantin\Desktop\YaccSample\YaccSample\BusParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "C:\Users\Konstantin\Desktop\YaccSample\YaccSample\BusParser.fsp"
                                                         "Nothing to see here" 
                   )
# 21 "C:\Users\Konstantin\Desktop\YaccSample\YaccSample\BusParser.fsp"
                 : string));
|]
# 153 "C:\Users\Konstantin\Desktop\YaccSample\YaccSample\BusParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 15;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : string =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
